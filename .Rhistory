(Fig_SX02 <-
ggplot(pred.df %>% filter(growth_type == "linear"), aes(x = pop_dens, y = p, color = gt_group, group = gt_group))+
geom_point(data = model_stacked %>% filter(growth_type == "linear"), aes(x = pop_dens, y = r0, fill = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(size = 1, linetype = "solid")+
scale_y_continuous(limits = c(0, .012))+
scale_fill_brewer("Generation time", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time", type = "qual", palette = "Set2")+
theme_clean()+
xlim(c(0, 0.6))+
xlab("Population density [n / patch]")+
ylab("Reproductive rate [offspring / t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA)))
ggplot(pred.df %>% filter(growth_type == "linear"), aes(x = pop_dens, y = p))+
geom_point(data = model_stacked %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(aes(color = gt_group, group = gt_group), size = 1, linetype = "solid")+
scale_y_continuous(limits = c(0, .02), breaks = c(0, 0.0075, 0.01, 0.0138, .02), labels = c("0.00", expression("r"[0]), 0.01, expression("r"[0]), .02))+
scale_fill_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.0108, yend = 0.0088), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "turquoise")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.005, yend = 0.0041), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "coral1", )+
geom_text(data = pred.df %>% filter(growth_type == "logistic") %>% group_by(gt_group) %>% filter(pop_dens == pop_dens[which.min(abs(pop_dens - 0.3))]), aes(x = pop_dens, y = p + c(0.003, -0.002)), label = expression(lambda), color = c("turquoise", "coral1"))+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA))
ggplot(pred.df %>% filter(growth_type == "linear"), aes(x = pop_dens, y = p))+
geom_point(data = model_stacked %>% filter(growth_type == "linear"), aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(aes(color = gt_group, group = gt_group), size = 1, linetype = "solid")+
scale_y_continuous(limits = c(0, .02), breaks = c(0, 0.0075, 0.01, 0.0138, .02), labels = c("0.00", expression("r"[0]), 0.01, expression("r"[0]), .02))+
scale_fill_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.0108, yend = 0.0088), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "turquoise")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.005, yend = 0.0041), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "coral1", )+
geom_text(data = pred.df %>% filter(growth_type == "logistic") %>% group_by(gt_group) %>% filter(pop_dens == pop_dens[which.min(abs(pop_dens - 0.3))]), aes(x = pop_dens, y = p + c(0.003, -0.002)), label = expression(lambda), color = c("turquoise", "coral1"))+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA))
(Fig_SX02 <-
ggplot(pred.df %>% filter(growth_type == "linear"), aes(x = pop_dens, y = p, color = gt_group, group = gt_group))+
geom_point(data = model_stacked %>% filter(growth_type == "linear"), aes(x = pop_dens, y = r0, fill = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(size = 1, linetype = "solid")+
scale_y_continuous(limits = c(0, .012))+
scale_fill_brewer("Generation time", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time", type = "qual", palette = "Set2")+
theme_clean()+
xlim(c(0, 0.6))+
xlab("Population density [n / patch]")+
ylab("Reproductive rate [offspring / t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA)))
library(tidyverse)
library(here)
library(foreach)
library(doSNOW)
library(parallel)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(shiny)
library(raster)
sim.path <- here("simulations", sim.date, "S1_Saturation", "processed")
animal.files <- list.files(sim.path, pattern = "animals.csv", full.names = T)
metadata.files <- list.files(sim.path, pattern = "metadata.csv", full.names = T)
substr(basename(animal.files), 1, 25) == substr(basename(metadata.files), 1, 25)
list.sims <- lapply(as.list(animal.files), function(x){
df <- data.frame(readr::read_csv(x), ID = substr(basename(x), 1,30))
df %>%
group_by(who) %>%
mutate(death.tick = ifelse(length(ticks) == 2, max(ticks), 100000)) %>%
mutate(birth.tick = min(ticks))
})
list.metadata <- lapply(as.list(metadata.files), function(x) data.frame(readr::read_csv(x), ID = substr(basename(x), 1,30)))
library(here)
library(tidyverse)
sim.date <- "2020-08-20"
dir.create(here("figs", sim.date))
dir.create(here("figs", sim.date, "supplemental")) # PATH TO FIGURES IN SUPPLEMENTAL FIGURES
dir.create(here("figs", sim.date, "main_text")) # PATH TO FIGURES IN MAIN TEXT
dir.create(here("figs", sim.date, "ODD")) # PATH TO FIGURES IN ODD
### MAIN TEXT FIGURES
for(script in list.files(here("code_proj_ECOEVO", "rscript", "create_main_text_figures"), full.names = T)[-1]){
source(script)
rm(list = ls()[!ls() %in% c("sim.date")])
}
### SUPPLEMENTAL FIGURES  (including ODD)
for(script in list.files(here("code_proj_ECOEVO", "rscript", "create_supplemental_figures"), full.names = T)){
source(script)
rm(list = ls()[!ls() %in% c("sim.date")])
}
file.copy("graphical_ODD.png", here("figs", sim.date, "main_text"))
file.rename(here("figs", sim.date, "main_text", "graphical_ODD.png"), here("figs", sim.date, "main_text", "Fig1.png"))
file.copy("graphical_ODD.png", here("figs", sim.date, "ODD"))
file.rename(here("figs", sim.date, "ODD", "graphical_ODD.png"), here("figs", sim.date, "ODD", "Fig1.png"))
library(shiny)
library(tidyverse)
library(here)
library(ggthemes)
library(cowplot)
sim.date = "2020-08-20"
out.path <- here("simulations", sim.date,"Main_Predictions",  "processed", "output_aggregated", "output_stacked", "stacked_aggregated_output.csv")
stacked <- read_csv(out.path)
summary(stacked$pop_dens)
# create a subset where state of lowest and highest population density is retained
stacked_sub <- stacked %>%
group_by(tot_coefvar) %>%
mutate(pop_group = order(pop_dens)) %>%
filter(pop_group %in% range(pop_group)) %>%
mutate(pop_group = factor(pop_group, levels = c("1", "10"), labels  = c("low", "high")))
Fig3A_data <- data.frame(x = runif(400), y = runif(400, max = 2))
(Fig3A <- ggplot()+
geom_point(data = Fig3A_data, aes(x = x, y = y), shape = 21, size = .5)+
ylab("Responsiveness (BT)")+
xlab("Relative investment\nto reproduction (LH)")+
geom_rect(data = stacked %>%  filter(growth_type == "logistic"), aes(ymax = min(medianBT), ymin = max(medianBT), xmin = min(medianLH), xmax = max(medianLH)), fill = NA, color = "gray50", size = 2)+
theme_clean()+
scale_x_continuous(breaks = c(0, .5, 1), labels = c("0 (low)", .5, "1 (high)"))+
scale_y_continuous(breaks = c(0, 1, 2), labels = c("0 (low)", 1, "2 (high)"))+
theme(text = element_text(size = 8), plot.background = element_rect(fill = NA, color = NA), panel.grid.major = element_blank()))
# create figure with traits on y and x and generation time as color scale wiith aggregated (not subsetted)
(Fig3B <- ggplot(stacked %>% filter(growth_type == "logistic"), aes(y = medianBT, x = medianLH))+
geom_point(aes(fill = log10(generation_time)),  alpha = 1, shape = 21, color = "white")+
geom_smooth(method = "lm", se = F, formula = y ~ poly(x,2), color = "black", size = 1, linetype = "dashed")+
scale_fill_viridis_c("Generation time\n(log 10)", breaks = c(2, 3), labels = c("2 (fast)", "3 (slow)"))+
ylab("Responsiveness (BT)")+
xlab("Relative investment\nto reproduction (LH)")+
theme_clean()+
theme(legend.position = "bottom", text = element_text(size = 8), legend.title = element_text(size = 8), legend.text = element_text(size = 8), legend.key.height = unit(4, "mm"), plot.background = element_rect(fill = NA, color = NA)))
for(script in list.files(here("code_proj_ECOEVO", "rscript", "create_main_text_figures"), full.names = T)){
source(script)
rm(list = ls()[!ls() %in% c("sim.date")])
}
for(script in list.files(here("code_proj_ECOEVO", "rscript", "create_supplemental_figures"), full.names = T)){
source(script)
rm(list = ls()[!ls() %in% c("sim.date")])
}
file.copy("graphical_ODD.png", here("figs", sim.date, "main_text"))
file.rename(here("figs", sim.date, "main_text", "graphical_ODD.png"), here("figs", sim.date, "main_text", "Fig1.png"))
file.copy("graphical_ODD.png", here("figs", sim.date, "ODD"))
file.rename(here("figs", sim.date, "ODD", "graphical_ODD.png"), here("figs", sim.date, "ODD", "Fig1.png"))
for(script in list.files(here("code_proj_ECOEVO", "rscript", "create_main_text_figures"), full.names = T)[-1]){
source(script)
rm(list = ls()[!ls() %in% c("sim.date")])
}
for(script in list.files(here("code_proj_ECOEVO", "rscript", "create_supplemental_figures"), full.names = T)){
source(script)
rm(list = ls()[!ls() %in% c("sim.date")])
}
library(shiny)
library(tidyverse)
library(here)
library(ggthemes)
library(cowplot)
if(!"out.path" %in% ls()){
if(!"sim.date" %in% ls()){
sim.date = "2020-08-20"
}
out.path <- here("simulations", sim.date,"Additional_test",  "processed", "output_aggregated", "output_stacked", "stacked_aggregated_output.csv")
}
stacked <- read_csv(out.path)
summary(stacked$pop_dens)
# create a subset where state of lowest and highest population density is retained
stacked_sub <- stacked %>%
group_by(tot_coefvar) %>%
mutate(pop_group = order(pop_dens)) %>%
filter(pop_group %in% range(pop_group)) %>%
mutate(pop_group = factor(pop_group, levels = c("1", "10"), labels  = c("low", "high")))
# using the subsetted data
SX06_data <- stacked_sub %>%  filter(growth_type == "logistic")
# FIG 4 A: distribution of life history trait and behavioural trait under different densities and coefficients of variation
(SX06_A <-
ggplot(SX06_data, aes(x = medianLH, y = medianBT))+
geom_line(aes(group = tot_coefvar, color = tot_coefvar),  alpha = 1)+
geom_point(aes(color = tot_coefvar, shape = pop_group),  alpha = 1, size = 2)+
scale_color_viridis_c("Coefficient of variation", values = c(0, 0.1, 0.3, 1))+
scale_shape_manual("Population density", values  =c(1,16))+
theme_clean()+
scale_size_continuous(range = c(.5,5))+
theme(legend.position = "bottom", text = element_text(size = 8), legend.title = element_text(size = 8), legend.text = element_text(size = 8), legend.key.height = unit(4, "mm"))+
ylab("Responsiveness (BT)")+
xlab("Relative investment to reproduction (LH)")+
guides(size = guide_legend(title = "Population\nDensity")))
# Fig 4 B: Distribution of movement behaviour and investment to reproduction
(SX06_B <-
ggplot(SX06_data, aes(y = median_movement_activity, x = median_repo_activity))+
geom_line(aes(group = tot_coefvar, color = tot_coefvar),  alpha = 1)+
geom_point(aes(color = tot_coefvar, shape = pop_group),  alpha = 1, size = 2)+
scale_color_viridis_c("Coefficient of\nvariation", breaks = c(round(min(SX06_data$tot_coefvar), 1) + 0.2, round(max(SX06_data$tot_coefvar), 1) - 0.2), labels = c(paste0(round(min(SX06_data$tot_coefvar), 1) + 0.2, " (stabile)"), paste0(max(round(SX06_data$tot_coefvar, 1)) - 0.2, " (labile)")), values = c(0, 0.1, 0.3, 1))+
scale_shape_manual("Population\ndensity", values  =c(1,16))+
theme_clean()+
scale_size_continuous(range = c(.5,5), breaks = c(0.05, 0.15, 0.25))+
theme(legend.position = "right", text = element_text(size = 8), legend.title = element_text(size = 8), legend.text = element_text(size = 8), legend.box = "vertical", legend.key.height = unit(4, "mm"))+
ylab("Movement rate")+
xlab("Rate of investment to reproduction")+
guides(size = guide_legend(title = "Population\nDensity")))
SX06 <-
gridExtra::grid.arrange(
ggdraw(SX06_A + theme(legend.position = "none", plot.background = element_rect(fill = NA, color = NA))) + draw_plot_label("A"),
ggdraw(SX06_B+ theme(plot.background = element_rect(fill = NA, color = NA))) + draw_plot_label("B"),
layout_matrix = matrix(c(rep(1, 4), rep(2, 6)), ncol = 10, nrow = 1))
if(!"out.path" %in% ls()){
if(!"sim.date" %in% ls()){
sim.date = "2020-08-20"
}
out.path <- here("simulations", sim.date,"Additional_test",  "processed", "output_aggregated", "output_stacked", "stacked_aggregated_output.csv")
}
stacked <- read_csv(out.path)
SX07_data <-
stacked[, - which(names(stacked) == "tot_coefvar")] %>%
filter(growth_type == "logistic") %>%
mutate("Movement rate" = scale(upper_movement_activity - lower_movement_activity)) %>%
mutate("Rate of investment\nto reproduction" = scale(upper_repo_activity - lower_repo_activity)) %>%
mutate("Responsiveness (BT)" = scale(upperBT - lowerBT)) %>%
mutate("Relative investment\nto reproduction (LH)" = scale(upperLH - lowerLH)) %>%
dplyr::select(generation_time, "Movement rate", "Rate of investment\nto reproduction", "Responsiveness (BT)", "Relative investment\nto reproduction (LH)") %>%
reshape2::melt(id.vars = c("generation_time"))
# create figure
(SX07 <-
ggplot(SX07_data, aes(x = log10(generation_time), y = value))+
geom_point(alpha = 1, shape = 21, fill = "gray40", color = "white", size = .8)+
theme_clean() +
theme(plot.background = element_rect(fill = NA, color = NA), panel.grid.major = element_blank(), panel.grid.major.y = element_blank(), strip.placement = "outside")+
facet_wrap(~variable, ncol = 2, strip.position = "left")+
xlab("Generation time (log10)") +
ylab("")+
scale_x_continuous(breaks = c(2, 2.5, 3))
)
ggplot(SX07_data, aes(x = pop_dens, y = p))+
geom_point(data = model_stacked %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(aes(color = gt_group, group = gt_group), size = 1, linetype = "solid")+
scale_y_continuous(limits = c(0, .02), breaks = c(0, 0.0075, 0.01, 0.0138, .02), labels = c("0.00", expression("r"[0]), 0.01, expression("r"[0]), .02))+
scale_fill_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.0108, yend = 0.0088), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "turquoise")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.005, yend = 0.0041), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "coral1", )+
geom_text(data = pred.df %>% filter(growth_type == "logistic") %>% group_by(gt_group) %>% filter(pop_dens == pop_dens[which.min(abs(pop_dens - 0.3))]), aes(x = pop_dens, y = p + c(0.003, -0.002)), label = expression(lambda), color = c("turquoise", "coral1"))+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA))
model_stacked <- stacked
# generation generation time groups divided by median
model_stacked$gt_group <- cut(model_stacked$generation_time, c(0, quantile(model_stacked$generation_time, seq(.5, .5, length.out = 1)), max(model_stacked$generation_time)))
levels(model_stacked$gt_group) <- c("fast", "slow")
model_stacked$pop_dens <- model_stacked$pop_dens / (250 * 250)
# fit linear models for each growth type
fit_lin <- glm(r0 ~ gt_group + gt_group : pop_dens + pop_dens, model_stacked %>% filter(growth_type == "linear"), family = "gaussian")
# fit linear models for each growth type
fit_log <- glm(r0 ~ gt_group + gt_group : pop_dens + pop_dens, model_stacked %>% filter(growth_type == "logistic"), family = "gaussian")
# create data.frame with population density, generation time groups and growth type
pred.df <- expand.grid(gt_group = unique(model_stacked$gt_group), pop_dens = seq(min(model_stacked$pop_dens), max(model_stacked$pop_dens), length.out = 100), growth_type = c("linear", "logistic"))
# create data.frame with population density, generation time groups and growth type
pred.df <- expand.grid(gt_group = unique(model_stacked$gt_group), pop_dens = seq(min(model_stacked$pop_dens), max(model_stacked$pop_dens), length.out = 100), growth_type = c("logistic"))
# predict r0
pred.df$p <- NA
pred.df$p[pred.df$growth_type == "linear"] <- predict(fit_lin, pred.df[pred.df$growth_type == "linear",], type = "response")
model_stacked <- stacked
# generation generation time groups divided by median
model_stacked$gt_group <- cut(model_stacked$generation_time, c(0, quantile(model_stacked$generation_time, seq(.5, .5, length.out = 1)), max(model_stacked$generation_time)))
levels(model_stacked$gt_group) <- c("fast", "slow")
model_stacked$pop_dens <- model_stacked$pop_dens / (250 * 250)
# fit linear models for each growth type
fit_log <- glm(r0 ~ gt_group + gt_group : pop_dens + pop_dens, model_stacked %>% filter(growth_type == "logistic"), family = "gaussian")
# create data.frame with population density, generation time groups and growth type
pred.df <- expand.grid(gt_group = unique(model_stacked$gt_group), pop_dens = seq(min(model_stacked$pop_dens), max(model_stacked$pop_dens), length.out = 100), growth_type = c("logistic"))
# predict r0
pred.df$p <- NA
pred.df$p[pred.df$growth_type == "logistic"] <- predict(fit_log, pred.df[pred.df$growth_type == "logistic",], type = "response")
ggplot(SX07_data, aes(x = pop_dens, y = p))+
geom_point(data = model_stacked %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(aes(color = gt_group, group = gt_group), size = 1, linetype = "solid")+
scale_y_continuous(limits = c(0, .02), breaks = c(0, 0.0075, 0.01, 0.0138, .02), labels = c("0.00", expression("r"[0]), 0.01, expression("r"[0]), .02))+
scale_fill_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.0108, yend = 0.0088), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "turquoise")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.005, yend = 0.0041), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "coral1", )+
geom_text(data = pred.df %>% filter(growth_type == "logistic") %>% group_by(gt_group) %>% filter(pop_dens == pop_dens[which.min(abs(pop_dens - 0.3))]), aes(x = pop_dens, y = p + c(0.003, -0.002)), label = expression(lambda), color = c("turquoise", "coral1"))+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA))
model_stacked <- stacked
# generation generation time groups divided by median
model_stacked$gt_group <- cut(model_stacked$generation_time, c(0, quantile(model_stacked$generation_time, seq(.5, .5, length.out = 1)), max(model_stacked$generation_time)))
cut(model_stacked$generation_time, c(0, quantile(model_stacked$generation_time, seq(.5, .5, length.out = 1)), max(model_stacked$generation_time)))
# generation generation time groups divided by median
model_stacked$gt_group <- cut(model_stacked$generation_time, c(0, quantile(model_stacked$generation_time, seq(.5, .5, length.out = 1)), max(model_stacked$generation_time)))
levels(model_stacked$gt_group) <- c("fast", "slow")
model_stacked$pop_dens <- model_stacked$pop_dens / (250 * 250)
# fit linear models for each growth type
fit_log <- glm(r0 ~ gt_group + gt_group : pop_dens + pop_dens, model_stacked %>% filter(growth_type == "logistic"), family = "gaussian")
# create data.frame with population density, generation time groups and growth type
pred.df <- expand.grid(gt_group = unique(model_stacked$gt_group), pop_dens = seq(min(model_stacked$pop_dens), max(model_stacked$pop_dens), length.out = 100), growth_type = c("logistic"))
# predict r0
pred.df$p <- NA
pred.df$p[pred.df$growth_type == "logistic"] <- predict(fit_log, pred.df[pred.df$growth_type == "logistic",], type = "response")
ggplot(SX07_data, aes(x = pop_dens, y = p))+
geom_point(data = model_stacked %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(aes(color = gt_group, group = gt_group), size = 1, linetype = "solid")+
scale_y_continuous(limits = c(0, .02), breaks = c(0, 0.0075, 0.01, 0.0138, .02), labels = c("0.00", expression("r"[0]), 0.01, expression("r"[0]), .02))+
scale_fill_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.0108, yend = 0.0088), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "turquoise")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.005, yend = 0.0041), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "coral1", )+
geom_text(data = pred.df %>% filter(growth_type == "logistic") %>% group_by(gt_group) %>% filter(pop_dens == pop_dens[which.min(abs(pop_dens - 0.3))]), aes(x = pop_dens, y = p + c(0.003, -0.002)), label = expression(lambda), color = c("turquoise", "coral1"))+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA))
ggplot(SX07_data, aes(x = pop_dens, y = p))+
geom_point(data = model_stacked, aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(aes(color = gt_group, group = gt_group), size = 1, linetype = "solid")+
scale_y_continuous(limits = c(0, .02), breaks = c(0, 0.0075, 0.01, 0.0138, .02), labels = c("0.00", expression("r"[0]), 0.01, expression("r"[0]), .02))+
scale_fill_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.0108, yend = 0.0088), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "turquoise")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.005, yend = 0.0041), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "coral1", )+
geom_text(data = pred.df %>% filter(growth_type == "logistic") %>% group_by(gt_group) %>% filter(pop_dens == pop_dens[which.min(abs(pop_dens - 0.3))]), aes(x = pop_dens, y = p + c(0.003, -0.002)), label = expression(lambda), color = c("turquoise", "coral1"))+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA))
ggplot(SX07_data, aes(x = pop_dens, y = p))+
geom_point(data = model_stacked, aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")
ggplot(SX07_data, aes(x = pop_dens, y = p))+
geom_point(data = model_stacked, aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(aes(color = gt_group, group = gt_group), size = 1, linetype = "solid")
ggplot(SX07_data, aes(x = pop_dens, y = p))+
geom_point(data = model_stacked, aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(aes(data = model_stacked, color = gt_group, group = gt_group), size = 1, linetype = "solid")+
scale_y_continuous(limits = c(0, .02), breaks = c(0, 0.0075, 0.01, 0.0138, .02), labels = c("0.00", expression("r"[0]), 0.01, expression("r"[0]), .02))+
scale_fill_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.0108, yend = 0.0088), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "turquoise")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.005, yend = 0.0041), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "coral1", )+
geom_text(data = pred.df %>% filter(growth_type == "logistic") %>% group_by(gt_group) %>% filter(pop_dens == pop_dens[which.min(abs(pop_dens - 0.3))]), aes(x = pop_dens, y = p + c(0.003, -0.002)), label = expression(lambda), color = c("turquoise", "coral1"))+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA))
ggplot(SX07_data, aes(x = pop_dens, y = p))+
geom_point(data = model_stacked, aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(data = model_stacked,aes(color = gt_group, group = gt_group), size = 1, linetype = "solid")+
scale_y_continuous(limits = c(0, .02), breaks = c(0, 0.0075, 0.01, 0.0138, .02), labels = c("0.00", expression("r"[0]), 0.01, expression("r"[0]), .02))+
scale_fill_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.0108, yend = 0.0088), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "turquoise")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.005, yend = 0.0041), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "coral1", )+
geom_text(data = pred.df %>% filter(growth_type == "logistic") %>% group_by(gt_group) %>% filter(pop_dens == pop_dens[which.min(abs(pop_dens - 0.3))]), aes(x = pop_dens, y = p + c(0.003, -0.002)), label = expression(lambda), color = c("turquoise", "coral1"))+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA))
(Fig6 <-
ggplot(pred.df %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = p))+
geom_point(data = model_stacked %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(aes(color = gt_group, group = gt_group), size = 1, linetype = "solid")+
scale_y_continuous(limits = c(0, .02), breaks = c(0, 0.0075, 0.01, 0.0138, .02), labels = c("0.00", expression("r"[0]), 0.01, expression("r"[0]), .02))+
scale_fill_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.0108, yend = 0.0088), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "turquoise")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.005, yend = 0.0041), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "coral1", )+
geom_text(data = pred.df %>% filter(growth_type == "logistic") %>% group_by(gt_group) %>% filter(pop_dens == pop_dens[which.min(abs(pop_dens - 0.3))]), aes(x = pop_dens, y = p + c(0.003, -0.002)), label = expression(lambda), color = c("turquoise", "coral1"))+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA)))
ggplot(pred.df %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = p))+
geom_point(data = model_stacked %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(aes(color = gt_group, group = gt_group), size = 1, linetype = "solid")+
scale_y_continuous(limits = c(0, .02), breaks = c(0, 0.0075, 0.01, 0.0138, .02), labels = c("0.00", expression("r"[0]), 0.01, expression("r"[0]), .02))+
scale_fill_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.0108, yend = 0.0088), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "turquoise")+
geom_segment(aes(x = 0.25, xend = 0.35, y = 0.005, yend = 0.0041), arrow = arrow(length = unit(0.2, "cm"), ends = "both"), color = "coral1", )+
geom_text(data = pred.df %>% filter(growth_type == "logistic") %>% group_by(gt_group) %>% filter(pop_dens == pop_dens[which.min(abs(pop_dens - 0.3))]), aes(x = pop_dens, y = p + c(0.003, -0.002)), label = expression(lambda), color = c("turquoise", "coral1"))+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA))
ggplot(pred.df %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = p))+
geom_point(data = model_stacked %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(aes(color = gt_group, group = gt_group), size = 1, linetype = "solid")+
scale_y_continuous(limits = c(0, .02), breaks = c(0, 0.0075, 0.01, 0.0138, .02), labels = c("0.00", expression("r"[0]), 0.01, expression("r"[0]), .02))+
scale_fill_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA))
ggplot(pred.df %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = p))+
geom_point(data = model_stacked %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(aes(color = gt_group, group = gt_group), size = 1, linetype = "solid")+
scale_fill_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA))
SX07B <-
ggplot(pred.df %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = p))+
geom_point(data = model_stacked %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(aes(color = gt_group, group = gt_group), size = 1, linetype = "solid")+
scale_fill_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA))
stacked <- read_csv(out.path)
SX07_data <-
stacked[, - which(names(stacked) == "tot_coefvar")] %>%
filter(growth_type == "logistic") %>%
mutate("Movement rate" = scale(upper_movement_activity - lower_movement_activity)) %>%
mutate("Rate of investment\nto reproduction" = scale(upper_repo_activity - lower_repo_activity)) %>%
mutate("Responsiveness (BT)" = scale(upperBT - lowerBT)) %>%
mutate("Relative investment\nto reproduction (LH)" = scale(upperLH - lowerLH)) %>%
dplyr::select(generation_time, "Movement rate", "Rate of investment\nto reproduction", "Responsiveness (BT)", "Relative investment\nto reproduction (LH)") %>%
reshape2::melt(id.vars = c("generation_time"))
# create figure
(SX07A <-
ggplot(SX07_data, aes(x = log10(generation_time), y = value))+
geom_point(alpha = 1, shape = 21, fill = "gray40", color = "white", size = .8)+
theme_clean() +
theme(plot.background = element_rect(fill = NA, color = NA), panel.grid.major = element_blank(), panel.grid.major.y = element_blank(), strip.placement = "outside")+
facet_wrap(~variable, ncol = 2, strip.position = "left")+
xlab("Generation time (log10)") +
ylab("")+
scale_x_continuous(breaks = c(2, 2.5, 3))
)
model_stacked <- stacked
# generation generation time groups divided by median
model_stacked$gt_group <- cut(model_stacked$generation_time, c(0, quantile(model_stacked$generation_time, seq(.5, .5, length.out = 1)), max(model_stacked$generation_time)))
levels(model_stacked$gt_group) <- c("fast", "slow")
model_stacked$pop_dens <- model_stacked$pop_dens / (250 * 250)
# fit linear models for each growth type
fit_log <- glm(r0 ~ gt_group + gt_group : pop_dens + pop_dens, model_stacked %>% filter(growth_type == "logistic"), family = "gaussian")
# create data.frame with population density, generation time groups and growth type
pred.df <- expand.grid(gt_group = unique(model_stacked$gt_group), pop_dens = seq(min(model_stacked$pop_dens), max(model_stacked$pop_dens), length.out = 100), growth_type = c("logistic"))
# predict r0
pred.df$p <- NA
pred.df$p[pred.df$growth_type == "logistic"] <- predict(fit_log, pred.df[pred.df$growth_type == "logistic",], type = "response")
SX07B <-
ggplot(pred.df %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = p))+
geom_point(data = model_stacked %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(aes(color = gt_group, group = gt_group), size = 1, linetype = "solid")+
scale_fill_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA))
library(tidyverse)
library(here)
library(ggthemes)
# read csv file with aggregated data
if(!"out.path" %in% ls()){
if(!"sim.date" %in% ls()){
sim.date = "2020-08-20"
}
out.path <- here("simulations", sim.date,"Additional_test",  "processed", "output_aggregated", "output_stacked", "stacked_aggregated_output.csv")
}
stacked <- read_csv(out.path)
SX07_data <-
stacked[, - which(names(stacked) == "tot_coefvar")] %>%
filter(growth_type == "logistic") %>%
mutate("Movement rate" = scale(upper_movement_activity - lower_movement_activity)) %>%
mutate("Rate of investment\nto reproduction" = scale(upper_repo_activity - lower_repo_activity)) %>%
mutate("Responsiveness (BT)" = scale(upperBT - lowerBT)) %>%
mutate("Relative investment\nto reproduction (LH)" = scale(upperLH - lowerLH)) %>%
dplyr::select(generation_time, "Movement rate", "Rate of investment\nto reproduction", "Responsiveness (BT)", "Relative investment\nto reproduction (LH)") %>%
reshape2::melt(id.vars = c("generation_time"))
# create figure
(SX07A <-
ggplot(SX07_data, aes(x = log10(generation_time), y = value))+
geom_point(alpha = 1, shape = 21, fill = "gray40", color = "white", size = .8)+
theme_clean() +
theme(plot.background = element_rect(fill = NA, color = NA), panel.grid.major = element_blank(), panel.grid.major.y = element_blank(), strip.placement = "outside")+
facet_wrap(~variable, ncol = 2, strip.position = "left")+
xlab("Generation time (log10)") +
ylab("")+
scale_x_continuous(breaks = c(2, 2.5, 3))
)
model_stacked <- stacked
# generation generation time groups divided by median
model_stacked$gt_group <- cut(model_stacked$generation_time, c(0, quantile(model_stacked$generation_time, seq(.5, .5, length.out = 1)), max(model_stacked$generation_time)))
levels(model_stacked$gt_group) <- c("fast", "slow")
model_stacked$pop_dens <- model_stacked$pop_dens / (250 * 250)
# fit linear models for each growth type
fit_log <- glm(r0 ~ gt_group + gt_group : pop_dens + pop_dens, model_stacked %>% filter(growth_type == "logistic"), family = "gaussian")
# create data.frame with population density, generation time groups and growth type
pred.df <- expand.grid(gt_group = unique(model_stacked$gt_group), pop_dens = seq(min(model_stacked$pop_dens), max(model_stacked$pop_dens), length.out = 100), growth_type = c("logistic"))
# predict r0
pred.df$p <- NA
pred.df$p[pred.df$growth_type == "logistic"] <- predict(fit_log, pred.df[pred.df$growth_type == "logistic",], type = "response")
SX07B <-
ggplot(pred.df %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = p))+
geom_point(data = model_stacked %>% filter(growth_type == "logistic"), aes(x = pop_dens, y = r0, fill = gt_group, color = gt_group, group = gt_group),  inherit.aes = F, alpha = 1, shape = 21, size = 1, color = "white")+
geom_line(aes(color = gt_group, group = gt_group), size = 1, linetype = "solid")+
scale_fill_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
scale_color_brewer("Generation time (POL)", type = "qual", palette = "Set2")+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/t]")+
theme(legend.position = "top", text = element_text(size = 10), legend.title = element_text(size = 10), legend.text = element_text(size = 10), plot.background = element_rect(fill = NA, color = NA))
gridExtra::grid.arrange(SX07A, SX07B)
gridExtra::grid.arrange(SX07A, SX07B, layout_matrix = as.matrix(c(1,1,1,1,2,2), nc = 2))
ggsave(here::here("figs", sim.date, "supplemental", paste0("Fig_SX07", ".png")), SX07, width = 9, height = 9, units = "cm", dpi = 600)
ggsave(here::here("figs", sim.date, "supplemental", paste0("Fig_SX07", ".png")), SX07, width = 14, height = 14, units = "cm", dpi = 600)
SX07 <- gridExtra::grid.arrange(SX07A, SX07B, layout_matrix = as.matrix(c(1,1,1,1,1,1,,2,2,2,2), nc = 2))
SX07 <- gridExtra::grid.arrange(SX07A, SX07B, layout_matrix = as.matrix(c(1,1,1,1,1,1,1,2,2,2,2), nc = 2))
SX07 <- gridExtra::grid.arrange(SX07A, SX07B, layout_matrix = as.matrix(c(1,1,1,1,1,1,1,1, 2,2,2,2), nc = 2))
ggsave(here::here("figs", sim.date, "supplemental", paste0("Fig_SX07", ".png")), SX07, width = 10, height = 15, units = "cm", dpi = 600)
