scale_size_continuous(range = c(.5,5))+
theme(legend.position = "none", text = element_text(size = 8), legend.title = element_text(size = 8), legend.text = element_text(size = 8), legend.key.height = unit(4, "mm"), panel.grid.major.y = element_blank())+
ylab("Responsiveness")+
xlab("Relative investment\nto reproduction")+
guides(size = guide_legend(title = "Population\nDensity"), shape = guide_legend(direction = "vertical")))
# Fig 4 B: Distribution of movement behaviour and investment to reproduction
(p1_plot_phenotypic_behaviour_paper <-
ggplot(IncomeBreeding_data_sub, aes(y = median_movement_activity, x = median_repo_activity))+
geom_line(aes(group = tot_coefvar, color = tot_coefvar),  alpha = 1)+
geom_point(aes(color = tot_coefvar, shape = gt_group),  alpha = 1, size = 2)+
scale_color_viridis_c("Coefficient of\nvariation", breaks = c(round(min(IncomeBreeding_data_sub$tot_coefvar), 1)+.1, round(max(IncomeBreeding_data_sub$tot_coefvar), 1)), labels = c(paste0(round(min(IncomeBreeding_data_sub$tot_coefvar), 1)+.1, " (stable)"), paste0(round(max(IncomeBreeding_data_sub$tot_coefvar), 1), " (labile)")), values = c(0, 0.1, 0.3, 1))+
scale_shape_manual("Generation\ntime", values  =c(17,1))+
theme_clean()+
scale_size_continuous(range = c(.5,5), breaks = c(0.05, 0.15, 0.25))+
scale_x_continuous(breaks = c(.1, .3, .5))+
scale_y_continuous(breaks = c(.15,.2,.25))+
theme(legend.position = "none", text = element_text(size = 8), legend.title = element_text(size = 8), legend.text = element_text(size = 8), legend.box = "vertical", legend.key.height = unit(4, "mm"), panel.grid.major.y = element_blank())+
ylab("Movement\nrate")+
xlab("Rate of investment\nto reproduction")+
guides(size = guide_legend(title = "Population\nDensity")))
legend <- grid::rasterGrob(jpeg::readJPEG(here("figs", sim.date, "main_text", "legend_box.jpg")))
# arrange figure 4 in a grid
IncomeBreeding <-
gridExtra::grid.arrange(
legend,
ggdraw(p1_plot_popdensGenerationTime + theme(legend.position = "none", plot.background = element_rect(fill = NA, color = NA))) + draw_plot_label("A"),
ggdraw(p1_plot_BRN_paper + theme(legend.position = "none", plot.background = element_rect(fill = NA, color = NA))) + draw_plot_label("B"),
ggdraw(p1_plot_phenotypic_behaviour_paper + theme(plot.background = element_rect(fill = NA, color = NA))) + draw_plot_label("C"),
ggdraw(gg_inclination  + theme(plot.background = element_rect(fill = NA, color = NA), legend.position = "none")) + draw_plot_label("D"),
layout_matrix = matrix(c(1,1,2,2,1,1,2,2,3,3,3,3,3,3,3,3,4,4,5,5,4,4,5,5),nrow = 4))
# save figure 4
ggsave(here::here("figs", sim.date, "supplemental", paste0("Fig_SXX_IncomeBreeding", ".jpeg")), IncomeBreeding, width = 16, height = 10, units = "cm", dpi = 600)
library(here)
library(tidyverse)
sim.date <- "2021-03-28"
dir.create(here("figs", sim.date))
dir.create(here("figs", sim.date, "ODD")) # PATH TO FIGURES IN ODD
dir.create(here("figs", sim.date, "main_text")) # PATH TO FIGURES IN MAIN TEXT
dir.create(here("figs", sim.date, "supplemental")) # PATH TO FIGURES IN SUPPLEMENTAL FIGURES
main.text.figure.scripts <- list.files(here("code", "rscript", "create_main_text_figures"), full.names = T)
main.text.figure.scripts <- main.text.figure.scripts[-which(stringi::stri_count_regex(main.text.figure.scripts, "main_text_Fig4_1stPrediction_PanelD.R") == 1)]
for(script in main.text.figure.scripts){
source(script)
rm(list = ls()[!ls() %in% c("sim.date")])
}
install.packages('fields')
library(here)
library(tidyverse)
# select the sim.date - to create supplemental and main text figures, all experiments stored in the BehaviourSpace and the sensitivty analysis  need to be finished and processed!
sim.date <- "2021-03-28"
# create folders to store figures
dir.create(here("figs", sim.date))
dir.create(here("figs", sim.date, "supplemental")) # PATH TO FIGURES IN SUPPLEMENTAL FIGURES
dir.create(here("figs", sim.date, "main_text")) # PATH TO FIGURES IN MAIN TEXT
dir.create(here("figs", sim.date, "ODD")) # PATH TO FIGURES IN ODD
### MAIN TEXT FIGURES
main.text.figure.scripts <- list.files(here("code", "rscript", "create_main_text_figures"), full.names = T)
# creation of PanelD in Fig 4 is in separate script that is sources by other scripts (so not needed to be sourced separately)
main.text.figure.scripts <- main.text.figure.scripts[-which(stringi::stri_count_regex(main.text.figure.scripts, "main_text_Fig4_1stPrediction_PanelD.R") == 1)]
for(script in main.text.figure.scripts){
source(script)
rm(list = ls()[!ls() %in% c("sim.date")])
}
### SUPPLEMENTAL FIGURES  (including ODD)
for(script in list.files(here("code", "rscript", "create_supplemental_figures"), full.names = T, pattern = "Supplement_[A-Z]")){
source(script)
rm(list = ls()[!ls() %in% c("sim.date")])
}
# copy graphical ODD to the correct folder
file.copy("graphical_ODD.jpg", here("figs", sim.date, "main_text"))
file.rename(here("figs", sim.date, "main_text", "graphical_ODD.jpg"), here("figs", sim.date, "main_text", "Fig1.jpg"))
file.copy("graphical_ODD.jpg", here("figs", sim.date, "ODD"))
file.rename(here("figs", sim.date, "ODD", "graphical_ODD.jpg"), here("figs", sim.date, "ODD", "Fig1.jpg"))
main.text.figure.scripts <- list.files(here("code", "rscript", "create_main_text_figures"), full.names = T)
# creation of PanelD in Fig 4 is in separate script that is sources by other scripts (so not needed to be sourced separately)
main.text.figure.scripts <- main.text.figure.scripts[-which(stringi::stri_count_regex(main.text.figure.scripts, "main_text_Fig4_1stPrediction_PanelD.R") == 1)]
for(script in main.text.figure.scripts){
source(script)
rm(list = ls()[!ls() %in% c("sim.date")])
}
install.packages('reldist')
for(script in main.text.figure.scripts){
source(script)
rm(list = ls()[!ls() %in% c("sim.date")])
}
1
for(script in main.text.figure.scripts){
source(script)
rm(list = ls()[!ls() %in% c("sim.date")])
}
df <- stacked <- read_csv(out.path)
source(here("code", "rscript", "create_main_text_figures", "main_text_Fig4_1stPrediction_PanelD.R"))
Fig3A_data <- data.frame(x = runif(400, max = 2), y = runif(400, max = 2))
source(here("code", "rscript", "create_main_text_figures", "main_text_Fig4_1stPrediction_PanelD.R"))
main.text.figure.scripts[-1]
main.text.figure.scripts[-1]
main.text.figure.scripts <- list.files(here("code", "rscript", "create_main_text_figures"), full.names = T)
main.text.figure.scripts <- main.text.figure.scripts[-which(stringi::stri_count_regex(main.text.figure.scripts, "main_text_Fig4_1stPrediction_PanelD.R") == 1)]
main.text.figure.scripts[-1]
for(script in main.text.figure.scripts[-1]){
source(script)
rm(list = ls()[!ls() %in% c("sim.date", "main.text.figure.scripts")])
}
for(script in main.text.figure.scripts[-1]){
source(script)
rm(list = ls()[!ls() %in% c("sim.date", "main.text.figure.scripts")])
}
file.copy("supplement_legend_box.jpg", here("figs", sim.date, "supplemental"))
file.rename(here("figs", sim.date, "supplemental", "supplement_legend_box.jpg"), here("figs", sim.date, "supplemental", "legend_box_lowtotcoefvar.jpg"))
file.copy("mainText_legend_box.jpg", here("figs", sim.date, "supplemental"))
file.rename(here("figs", sim.date, "supplemental", "mainText_legend_box.jpg"), here("figs", sim.date, "supplemental", "legend_box.jpg"))
required.packages <- c(
"shiny",
"tidyverse",
"here",
"gridExtra",
"raster",
"cowplot",
"scales",
"nlrx",
"future",
"fields",
"reldist",
"reshape2",
"jpeg",
"GGally",
"stringi",
"ggthemes",
"shinythemes")
!required.packages %in% installed.packages()
install.packages(required.packages[!required.packages %in% installed.packages()])
library(here)
library(tidyverse)
# select the sim.date - to create supplemental and main text figures, all experiments stored in the BehaviourSpace and the sensitivty analysis  need to be finished and processed!
sim.date <- "2021-03-28"
# create folders to store figures
dir.create(here("figs", sim.date))
dir.create(here("figs", sim.date, "supplemental")) # PATH TO FIGURES IN SUPPLEMENTAL FIGURES
dir.create(here("figs", sim.date, "main_text")) # PATH TO FIGURES IN MAIN TEXT
dir.create(here("figs", sim.date, "ODD")) # PATH TO FIGURES IN ODD
# copy graphical ODD to the correct folder
file.copy("graphical_ODD.jpg", here("figs", sim.date, "main_text"))
file.rename(here("figs", sim.date, "main_text", "graphical_ODD.jpg"), here("figs", sim.date, "main_text", "Fig1.jpg"))
file.copy("graphical_ODD.jpg", here("figs", sim.date, "ODD"))
file.rename(here("figs", sim.date, "ODD", "graphical_ODD.jpg"), here("figs", sim.date, "ODD", "Fig1.jpg"))
file.copy("mainText_legend_box.jpg", here("figs", sim.date, "main_text"))
file.rename(here("figs", sim.date, "main_text", "mainText_legend_box.jpg"), here("figs", sim.date, "main_text", "legend_box.jpg"))
file.copy("mainText_legend_box.jpg", here("figs", sim.date, "supplemental"))
file.rename(here("figs", sim.date, "supplemental", "mainText_legend_box.jpg"), here("figs", sim.date, "supplemental", "legend_box.jpg"))
file.copy("supplement_legend_box.jpg", here("figs", sim.date, "supplemental"))
file.rename(here("figs", sim.date, "supplemental", "supplement_legend_box.jpg"), here("figs", sim.date, "supplemental", "legend_box_lowtotcoefvar.jpg"))
dir.create("table", "Supplement")
path2netlogo <- dirname(path2headless)
path2model <- here("code", "model", "POLS_model.nlogo")
path2sims <- here("simulations", "2021-03-28")
experiments <- data.frame(exp_name = c(
"MainText_Landscape_fluctuation_Example",
"MainText_LowFreqHighIntensity",
"Supplement_LowFreqHighIntensity_monomorphic",
"Supplement_LowFreqHighIntensity_incomebreeding",
"Supplement_LowFreqHighIntensity_loggrowthVerhulst",
"Supplement_LowFreqHighIntensity_loggrowthRichards",
"Supplement_LowFreqHighIntensity_highh2",
"Supplement_HighFreqLowIntensity",
"Supplement_Saturation",
"Supplement_altered_movementassumption_landscape",
"Supplement_altered_movementassumption_POLS"
), threads = c(
2,
20,
20,
20,
20,
20,
20,
3,
4,
20,
10
))
library(here)
path2headless <- "\"Y:/Home/milles/NetLogo 6.1.1/netlogo-headless.bat\""
dir.create("simulations")
dir.create(here("simulations", "2021-03-28"))
dir.create("figs")
dir.create("table")
dir.create("table", "Supplement")
path2netlogo <- dirname(path2headless)
path2model <- here("code", "model", "POLS_model.nlogo")
path2sims <- here("simulations", "2021-03-28")
experiments <- data.frame(exp_name = c(
"MainText_Landscape_fluctuation_Example",
"MainText_LowFreqHighIntensity",
"Supplement_LowFreqHighIntensity_monomorphic",
"Supplement_LowFreqHighIntensity_incomebreeding",
"Supplement_LowFreqHighIntensity_loggrowthVerhulst",
"Supplement_LowFreqHighIntensity_loggrowthRichards",
"Supplement_LowFreqHighIntensity_highh2",
"Supplement_HighFreqLowIntensity",
"Supplement_Saturation",
"Supplement_altered_movementassumption_landscape",
"Supplement_altered_movementassumption_POLS"
), threads = c(
2,
20,
20,
20,
20,
20,
20,
3,
4,
20,
10
))
for(experiment in seq(nrow(experiments))){
dir.create(paste0(path2sims, "/", experiments$exp_name[experiment]))
print(paste0("Running", experiments$exp_name[experiment], "with", experiments$threads[experiment], "cores!"))
shell.cmd <- ( paste(path2headless, "--model", path2model, "--experiment", experiments$exp_name[experiment], "--threads", experiments$threads[experiment]))
shell(shell.cmd)
}
ifelse(experiments$threads < 6, experiments$threads, 6)
experiments$threads <- ifelse(experiments$threads < 6, experiments$threads, 6)
for(experiment in seq(nrow(experiments))){
dir.create(paste0(path2sims, "/", experiments$exp_name[experiment]))
print(paste0("Running", experiments$exp_name[experiment], "with", experiments$threads[experiment], "cores!"))
shell.cmd <- ( paste(path2headless, "--model", path2model, "--experiment", experiments$exp_name[experiment], "--threads", experiments$threads[experiment]))
shell(shell.cmd)
}
path2headless <- "\"Y:/Home/milles/NetLogo 6.1.1/netlogo-headless.bat\""
dir.create("simulations")
dir.create(here("simulations", "2021-03-28"))
library(here)
path2headless <- "\"Y:/Home/milles/NetLogo 6.1.1/netlogo-headless.bat\""
dir.create("simulations")
dir.create(here("simulations", "2021-03-28"))
dir.create("figs")
dir.create("table")
dir.create("table", "Supplement")
path2netlogo <- dirname(path2headless)
path2model <- here("code", "model", "POLS_model.nlogo")
path2sims <- here("simulations", "2021-03-28")
experiments <- data.frame(exp_name = c(
"MainText_Landscape_fluctuation_Example",
"MainText_LowFreqHighIntensity",
"Supplement_LowFreqHighIntensity_monomorphic",
"Supplement_LowFreqHighIntensity_incomebreeding",
"Supplement_LowFreqHighIntensity_loggrowthVerhulst",
"Supplement_LowFreqHighIntensity_loggrowthRichards",
"Supplement_LowFreqHighIntensity_highh2",
"Supplement_HighFreqLowIntensity",
"Supplement_Saturation",
"Supplement_altered_movementassumption_landscape",
"Supplement_altered_movementassumption_POLS"
), threads = c(
2,
20,
20,
20,
20,
20,
20,
3,
4,
20,
10
))
experiments$threads <- ifelse(experiments$threads < 5, experiments$threads, 5)
for(experiment in seq(nrow(experiments))){
dir.create(paste0(path2sims, "/", experiments$exp_name[experiment]))
print(paste("Running", experiments$exp_name[experiment], "with", experiments$threads[experiment], "cores!"))
shell.cmd <- ( paste(path2headless, "--model", path2model, "--experiment", experiments$exp_name[experiment], "--threads", experiments$threads[experiment]))
shell(shell.cmd)
}
source(here("code", "rscript", "process_simulation_output", "supplement_process_landscape_metrics"))
source(here("code", "rscript", "process_simulation_output", "supplement_process_SensitivityAnalysis.R"))
# PACKAGES REQUIRED TO RUN SCRIPTS
required.packages <- c(
"tidyverse",
"here",
"gridExtra",
"raster",
"cowplot",
"scales",
"parallel",
"doSNOW",
"foreach",
"tibble",
"nlrx",
"digest",
"future",
"fields",
"reldist",
"reshape2",
"rlang",
"jpeg",
"shiny",
"GGally",
"stringi",
"ggthemes")
#INSTALL MISSING PACKAGES
install.packages(required.packages[!required.packages %in% installed.packages()])
source(here("code", "rscript", "process_simulation_output", "supplement_process_SensitivityAnalysis.R"))
path2model <- here("code", "model", "POLS_model.nlogo")
dirname(path2headless)
path2netlogo <- dirname(path2headless)
path2netlogo <- dirname(path2headless)
source(here("code", "rscript", "process_simulation_output", "supplement_process_SensitivityAnalysis.R"))
dirname(path2headless)
substr(dirname(path2headless), 3,9999)
substr(dirname(path2headless), 2,9999)
substr(dirname(path2headless), 2,Inf)
substr(dirname(path2headless), 2, 9999)
substr(dirname(path2headless), 2)
substr(dirname(path2headless), start = 2)
path2netlogo <- substring(dirname(path2headless), first = 2)
path2netlogo <- substring(dirname(path2headless), first = 2)
source(here("code", "rscript", "process_simulation_output", "supplement_process_SensitivityAnalysis.R"))
library(here)
L1 <- "simulations" #L1 folder where simulations are stored
sim.date <- L2 <- "2021-03-28" #L2 date of experiment conduction
experiment.files <- list.files(here(L1, L2), full.names = T)
experiments <- basename(experiment.files[order(file.info(experiment.files)$mtime, decreasing = F)])
n_cores <- 3 #NUMBER OF CORES TO USE FOR PARALLEL PROCESSING OF SIMULATION DATA
return_f2_ <- T #RETURN INTERMEDIATE PRODUCT FOR FURTHER ANALYSES (SET FALSE TO SAVE STORAGE)
start.at_ <- 10000 #INITIAL TIME STEPS TO DISMISS
experiments_to_process <- vector()
for(L3 in experiments) {
if(!file.exists(here(L1, L2, L3, "processed", "output_aggregated", "output_stacked", "stacked_aggregated_output.csv"))){
experiments_to_process <- append(experiments_to_process, L3)
}
}
experiments_to_process <- experiments_to_process[- which(experiments_to_process == "MainText_Landscape_fluctuation_Example")]
for(L3 in experiments_to_process){
##############
### STEP 1 ###
##############
### CONVERT SIMULATION DATA TO A DATA FRAME FORMAT
source(here("code", "rscript", "process_simulation_output", "process_simulation_data_step1.R"))
### CLEANUP
rm(list = ls()[!ls() %in% c(paste0("L", seq(3)),"n_cores", "sim.date", "return_f2_", "start.at_", "experiments")])
##############
### STEP 2 ###
##############
### AGGREGATE INDIVIDUAL DATA BY SUBPOPULATIONS WHICH ARE DEFINED BY THE THE DECILES OF POPULATION DENSITY
source(here("code", "rscript", "process_simulation_output", "process_simulation_data_step2.R"))
### CLEANUP
rm(list = ls()[!ls() %in% c(paste0("L", seq(3)),"n_cores", "sim.date", "return_f2_", "start.at_", "experiments")])
##############
### STEP 3 ###
##############
### COMBINE AGGREGATED DATA FROM SINGLE SIMULATION RUNS TO A SINGLE DATASET
source(here("code", "rscript", "process_simulation_output", "process_simulation_data_step3.R"))
### CLEANUP
rm(list = ls()[!ls() %in% c(paste0("L", seq(3)),"n_cores", "sim.date", "return_f2_", "start.at_", "experiments")])
}
L3 = "MainText_LowFreqHighIntensity"
out.path <- here("simulations", sim.date,L3,  "processed", "output_aggregated", "output_stacked", "stacked_aggregated_output.csv")
df <- stacked <- read_csv(out.path)
source(here("code", "rscript", "create_main_text_figures", "main_text_Fig4_1stPrediction_PanelD.R"))
Fig3A_data <- data.frame(x = runif(400, max = 2), y = runif(400, max = 2))
(Fig3A <- ggplot()+
geom_point(data = Fig3A_data, aes(x = x, y = y), shape = 21, size = .5)+
ylab("Responsiveness")+
xlab("Reproductive investment threshold")+
geom_rect(data = stacked, aes(ymax = min(medianBT), ymin = max(medianBT), xmin = min(medianLH), xmax = max(medianLH)), fill = NA, color = "gray50", size = 2)+
theme_clean()+
scale_x_continuous(breaks = c(0, 1, 2), labels = c("0", 1, "2"))+
scale_y_continuous(breaks = c(0, 1, 2), labels = c("0", 1, "2"))+
theme(text = element_text(size = 8), plot.background = element_rect(fill = NA, color = NA), panel.grid.major = element_blank(), panel.grid.major.y = element_blank()))
(Fig3B <- ggplot(stacked, aes(y = medianBT, x = medianLH))+
geom_point(aes(fill = log10(generation_time)),  alpha = 1, shape = 21, color = "white")+
geom_smooth(method = "lm", se = F, formula = y ~ poly(x,2), color = "black", size = 1, linetype = "dashed")+
scale_fill_viridis_c("Generation time\n(log 10)", breaks = c(2.2, 3), labels = c("2.2 (fast)", "3 (slow)"), direction = -1)+
ylab("Responsiveness")+
xlab("Reproductive investment threshold")+
theme_clean()+
theme(legend.position = "bottom", text = element_text(size = 8), legend.title = element_text(size = 9), legend.text = element_text(size = 9), legend.key.height = unit(4, "mm"), plot.background = element_rect(fill = NA, color = NA), panel.grid.major.y = element_blank()))
Fig3 <-
gridExtra::grid.arrange(
ggdraw(Fig3A + theme(legend.position = "none", plot.background = element_rect(fill = NA, color = NA))) + draw_plot_label("A"),
ggdraw(Fig3B + theme(plot.background = element_rect(fill = NA, color = NA))) + draw_plot_label("B"),
layout_matrix = matrix(c(rep(1, 6), rep(2, 7)), ncol = 1, nrow = 13))
Fig4_data_sub <- stacked %>%
group_by(disturbance.intensity, disturbance.interval) %>%
filter(sim.id == sim.id[1]) %>%
group_by(sim.id) %>%
filter(!duplicated(generation_time)) %>%
filter(generation_time == max(generation_time) | generation_time == min(generation_time)) %>%
mutate(gt_group = ifelse(generation_time == min(generation_time), "fast end", "slow end"))
(p1_plot_popdensGenerationTime <- ggplot(Fig4_data_sub, aes(x = pop_dens/2500 , y = log10(generation_time), color = tot_coefvar, group = sim.id))+
scale_color_viridis_c("Coefficient of\nvariation", values = c(0, 0.1, 0.3, 1), breaks = c(.2, .6), labels = c("0.2 (stable)", "0.6 (labile)"))+
geom_line()+
geom_point(aes(color = tot_coefvar, shape = gt_group),  alpha = 1, size = 2)+
scale_shape_manual("Generation\ntime", values  =c(17,1))+
scale_size_continuous(range = c(.5,5), breaks = c(0.05, 0.15, 0.25))+
theme_clean()+
theme(legend.position = "none", text = element_text(size = 8), legend.title = element_text(size = 8), legend.text = element_text(size = 8), legend.box = "vertical", legend.key.height = unit(4, "mm"), panel.grid.major.y = element_blank())+
ylab("Generation  \ntime (log10)  ")+
scale_x_continuous(breaks = c(.25, 0.75))+
scale_y_continuous(breaks = c(2.2, 3))+
xlab("Population density [n/patch]"))
(p1_plot_BRN_paper <-
ggplot(Fig4_data_sub, aes(y = medianBT, x = medianLH))+
geom_line(aes(group = sim.id, color = tot_coefvar),  alpha = 1)+
geom_point(aes(color = tot_coefvar, shape = gt_group),  alpha = 1, size = 2)+
scale_color_viridis_c("Coefficient of\nvariation", values = c(0, 0.1, 0.3, 1), breaks = c(.2, .6), labels = c("0.2 (stable)", "0.6 (labile)"))+
scale_shape_manual("Generation time", values  =c(17,1))+
theme_clean()+
scale_size_continuous(range = c(.5,5))+
theme(legend.position = "none", text = element_text(size = 8), legend.title = element_text(size = 8), legend.text = element_text(size = 8), legend.key.height = unit(4, "mm"), panel.grid.major.y = element_blank())+
ylab("Responsiveness")+
xlab("Reproductive investment\nthreshold")+
guides(size = guide_legend(title = "Population\nDensity"), shape = guide_legend(direction = "vertical")))
### CALCULATE LANDSCAPE METRICS FOR SUPPLEMENT ###
if(!file.exists(here(L1, L2, "MainText_Landscape_fluctuation_Example", "ls_merged_agg.csv"))){
source(here("code", "rscript", "process_simulation_output", "supplement_process_landscape_metrics"))
}
source(here("code", "rscript", "process_simulation_output", "supplement_process_landscape_metrics.R"))
library(tidyverse)
library(here)
library(ggthemes)
library(cowplot)
# read csv file with aggregated data
if(!"out.path" %in% ls()){
if(!"sim.date" %in% ls()){
sim.date = "2021-03-28"
}
out.path <- here("simulations", sim.date,"MainText_LowFreqHighIntensity",  "processed", "output_aggregated", "output_stacked", "stacked_aggregated_output.csv")
}
stacked <- read_csv(out.path)
Fig4_data_sub <- stacked %>%
group_by(sim.id) %>%
filter(generation_time == max(generation_time) | generation_time == min(generation_time)) %>%
mutate(gt_group = ifelse(generation_time == min(generation_time), "fast end", "slow end"))
split_Fig4data <- split(Fig4_data_sub, paste0(Fig4_data_sub$disturbance.interval, Fig4_data_sub$disturbance.intensity))
facet_data <- lapply(split_Fig4data, function(x){
if(nrow(x) > 0){
x <- x %>% mutate(default = F)
other <- Fig4_data_sub[!Fig4_data_sub$sim.id %in% x$sim.id,] %>%
mutate(default = T) %>%
mutate(disturbance.interval = x$disturbance.interval[1]) %>%
mutate(disturbance.intensity = x$disturbance.intensity[1])
return(rbind(x, other))
}
})
facet_data_bound<- do.call(rbind, facet_data)%>%
mutate(disturbance.interval = paste0("Dist. interval: ", disturbance.interval)) %>%
mutate(disturbance.intensity = paste0("Dist. intensity: ", disturbance.intensity))
(repeatability <-
ggplot(facet_data_bound %>% filter(!default), aes(y = medianBT, x = medianLH))+
geom_point(data = facet_data_bound %>% filter(default), aes(y = medianBT, x = medianLH), color = "gray90")+
geom_line(aes(group = sim.id),  color = "coral1", alpha = 1)+
geom_point(aes(shape = gt_group), color = "coral1",   alpha = 1, size =1)+
scale_shape_manual("POL (generation time)", values  =c(17,1))+
theme_clean()+
scale_size_continuous(range = c(.5,5))+
theme(legend.key.height = unit(4, "mm"),panel.grid.major.y = element_blank(), legend.position = "top", text = element_text(size = 8), axis.text =  element_text(size = 8), axis.title =  element_text(size = 9), legend.text =  element_text(size = 8), legend.title =  element_text(size = 9))+
ylab("Responsiveness")+
xlab("Reproductive investment threshold")+
scale_y_continuous(breaks = c(1.2, 1.5))+
scale_x_continuous(breaks = c(1, 1.2))+
facet_wrap(disturbance.intensity ~ disturbance.interval, scales = "fixed"))
ggsave(here::here("figs", sim.date, "supplemental", paste0("S1_C_Repeatability", ".jpeg")), repeatability, width = 10, height = 10, units = "cm", dpi = 600)
sim.date = "2021-03-28a"
out.path <- here("simulations", sim.date,"MainText_LowFreqHighIntensity",  "processed", "output_aggregated", "output_stacked", "stacked_aggregated_output.csv")
if(!"out.path" %in% ls()){
if(!"sim.date" %in% ls()){
sim.date = "2021-03-28a"
}
out.path <- here("simulations", sim.date,"MainText_LowFreqHighIntensity",  "processed", "output_aggregated", "output_stacked", "stacked_aggregated_output.csv")
}
stacked <- read_csv(out.path)
Fig4_data_sub <- stacked %>%
group_by(sim.id) %>%
filter(generation_time == max(generation_time) | generation_time == min(generation_time)) %>%
mutate(gt_group = ifelse(generation_time == min(generation_time), "fast end", "slow end"))
split_Fig4data <- split(Fig4_data_sub, paste0(Fig4_data_sub$disturbance.interval, Fig4_data_sub$disturbance.intensity))
facet_data <- lapply(split_Fig4data, function(x){
if(nrow(x) > 0){
x <- x %>% mutate(default = F)
other <- Fig4_data_sub[!Fig4_data_sub$sim.id %in% x$sim.id,] %>%
mutate(default = T) %>%
mutate(disturbance.interval = x$disturbance.interval[1]) %>%
mutate(disturbance.intensity = x$disturbance.intensity[1])
return(rbind(x, other))
}
})
facet_data_bound<- do.call(rbind, facet_data)%>%
mutate(disturbance.interval = paste0("Dist. interval: ", disturbance.interval)) %>%
mutate(disturbance.intensity = paste0("Dist. intensity: ", disturbance.intensity))
(repeatability <-
ggplot(facet_data_bound %>% filter(!default), aes(y = medianBT, x = medianLH))+
geom_point(data = facet_data_bound %>% filter(default), aes(y = medianBT, x = medianLH), color = "gray90")+
geom_line(aes(group = sim.id),  color = "coral1", alpha = 1)+
geom_point(aes(shape = gt_group), color = "coral1",   alpha = 1, size =1)+
scale_shape_manual("POL (generation time)", values  =c(17,1))+
theme_clean()+
scale_size_continuous(range = c(.5,5))+
theme(legend.key.height = unit(4, "mm"),panel.grid.major.y = element_blank(), legend.position = "top", text = element_text(size = 8), axis.text =  element_text(size = 8), axis.title =  element_text(size = 9), legend.text =  element_text(size = 8), legend.title =  element_text(size = 9))+
ylab("Responsiveness")+
xlab("Reproductive investment threshold")+
scale_y_continuous(breaks = c(1.2, 1.5))+
scale_x_continuous(breaks = c(1, 1.2))+
facet_wrap(disturbance.intensity ~ disturbance.interval, scales = "fixed"))
ggsave(here::here("figs", sim.date, "supplemental", paste0("S1_C_Repeatability", ".jpeg")), repeatability, width = 10, height = 10, units = "cm", dpi = 600)
ggsave(here::here("figs", sim.date, "supplemental", paste0("S1_C_Repeatability", ".jpeg")), repeatability, width = 10, height = 10, units = "cm", dpi = 600)
ggsave(here::here("figs", sim.date, "supplemental", paste0("S1_C_Repeatability", ".jpeg")), repeatability, width = 10, height = 10, units = "cm", dpi = 600)
dev.off()
ggsave(here::here("figs", sim.date, "supplemental", paste0("S1_C_Repeatability", ".jpeg")), repeatability, width = 10, height = 10, units = "cm", dpi = 600)
sim.date = "2021-03-28"
ggsave(here::here("figs", sim.date, "supplemental", paste0("S1_C_Repeatability", ".jpeg")), repeatability, width = 10, height = 10, units = "cm", dpi = 600)
