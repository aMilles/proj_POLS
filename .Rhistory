geom_ribbon(aes(ymin = 0, ymax = pLHrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank())+
labs(x = "Reproductive investement threshold",
y = "Number of offspring (rel.)") +
ylim(0, 1))
(FitnessBT <- ggplot(df, aes(x = BT, y = pBTrel, group = pop_dens, color = pop_dens, fill = pop_dens))+
geom_ribbon(aes(ymin = 0, ymax = pLHrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank())+
labs(x = "Responsiveness",
y = "Relative number of offspring") +
ylim(0, 1))
combined <- FitnessLH + FitnessBT & theme(legend.position = "bottom")
combined + plot_layout(guides = "collect")
df
(FitnessBT <- ggplot(df, aes(x = BT, y = pBTrel, group = pop_dens, color = pop_dens, fill = pop_dens))+
geom_ribbon(aes(ymin = 0, ymax = pBTrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank())+
labs(x = "Responsiveness",
y = "Relative number of offspring") +
ylim(0, 1))
combined <- FitnessLH + FitnessBT & theme(legend.position = "bottom")
combined + plot_layout(guides = "collect")
fit_LH <- gam(fitness ~ s(LH, k = 3), data = x, family = "gaussian")
# calculate GAMs of 4 levels of population density with fitness ~ trait
preds <- lapply(split(sims_subset, cut(sims_subset$pop_dens, 4)), function(x){
pred.df <- data.frame(LH = seq(0,2, length.out = 100), BT = seq(0, 2, length.out = 100), pop_dens = mean(x$pop_dens))
x$fitness <- x$n_offspring / x$longevity
fit_LH <- gam(fitness ~ s(LH, k = 2), data = x, family = "gaussian")
fit_BT <- gam(fitness ~ s(BT, k = 2), data = x, family = "gaussian")
pred.df <-
pred.df %>%
mutate(pLH = predict.gam(fit_LH, newdata = pred_df, type = "response")) %>%
mutate(pBT = predict.gam(fit_BT, newdata = pred_df, type = "response")) %>%
mutate(pBTrel = pBT / max(pBT)) %>%
mutate(pLHrel = pLH / max(pLH))
return(pred.df)
})
df <- do.call(rbind, preds)
(FitnessLH <- ggplot(df, aes(x = LH, y = pLHrel, group = pop_dens, color = pop_dens, fill = pop_dens), alpha = .5)+
geom_ribbon(aes(ymin = 0, ymax = pLHrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank())+
labs(x = "Reproductive investement threshold",
y = "Number of offspring (rel.)") +
ylim(0, 1))
(FitnessBT <- ggplot(df, aes(x = BT, y = pBTrel, group = pop_dens, color = pop_dens, fill = pop_dens))+
geom_ribbon(aes(ymin = 0, ymax = pBTrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank();
panel.border = element_blank())+
labs(x = "Responsiveness",
y = "Relative number of offspring") +
ylim(0, 1))
(FitnessBT <- ggplot(df, aes(x = BT, y = pBTrel, group = pop_dens, color = pop_dens, fill = pop_dens))+
geom_ribbon(aes(ymin = 0, ymax = pBTrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank(),
panel.border = element_blank())+
labs(x = "Responsiveness",
y = "Relative number of offspring") +
ylim(0, 1))
pred.df <- data.frame(LH = seq(0,2, length.out = 100), BT = seq(0, 2, length.out = 100), pop_dens = mean(x$pop_dens))
x$fitness <- x$n_offspring / x$longevity
fit_LH <- gam(fitness ~ s(LH, k = 3), data = x, family = "gaussian")
fit_BT <- gam(fitness ~ s(BT, k = 3), data = x, family = "gaussian")
pred.df <-
pred.df %>%
mutate(pLH = predict.gam(fit_LH, newdata = pred_df, type = "response")) %>%
mutate(pBT = predict.gam(fit_BT, newdata = pred_df, type = "response")) %>%
mutate(pBTrel = pBT / max(pBT)) %>%
mutate(pLHrel = pLH / max(pLH))
# calculate GAMs of 4 levels of population density with fitness ~ trait
preds <- lapply(split(sims_subset, cut(sims_subset$pop_dens, 4)), function(x){
pred.df <- data.frame(LH = seq(0,2, length.out = 100), BT = seq(0, 2, length.out = 100), pop_dens = mean(x$pop_dens))
x$fitness <- x$n_offspring / x$longevity
fit_LH <- gam(fitness ~ s(LH, k = 3), data = x, family = "gaussian")
fit_BT <- gam(fitness ~ s(BT, k = 3), data = x, family = "gaussian")
pred.df <-
pred.df %>%
mutate(pLH = predict.gam(fit_LH, newdata = pred_df, type = "response")) %>%
mutate(pBT = predict.gam(fit_BT, newdata = pred_df, type = "response")) %>%
mutate(pBTrel = pBT / max(pBT)) %>%
mutate(pLHrel = pLH / max(pLH))
return(pred.df)
})
df <- do.call(rbind, preds)
(FitnessLH <- ggplot(df, aes(x = LH, y = pLHrel, group = pop_dens, color = pop_dens, fill = pop_dens), alpha = .5)+
geom_ribbon(aes(ymin = 0, ymax = pLHrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank())+
labs(x = "Reproductive investement threshold",
y = "Number of offspring (rel.)") +
ylim(0, 1))
(FitnessBT <- ggplot(df, aes(x = BT, y = pBTrel, group = pop_dens, color = pop_dens, fill = pop_dens))+
geom_ribbon(aes(ymin = 0, ymax = pBTrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())+
labs(x = "Responsiveness",
y = "Relative number of offspring") +
ylim(0, 1))
# calculate GAMs of 4 levels of population density with fitness ~ trait
preds <- lapply(split(sims_subset, cut(sims_subset$pop_dens, 4)), function(x){
pred.df <- data.frame(LH = seq(0,2, length.out = 100), BT = seq(.5, 2, length.out = 100), pop_dens = mean(x$pop_dens))
x$fitness <- x$n_offspring / x$longevity
fit_LH <- gam(fitness ~ s(LH, k = 4), data = x, family = "gaussian")
fit_BT <- gam(fitness ~ s(BT, k = 4), data = x, family = "gaussian")
pred.df <-
pred.df %>%
mutate(pLH = predict.gam(fit_LH, newdata = pred_df, type = "response")) %>%
mutate(pBT = predict.gam(fit_BT, newdata = pred_df, type = "response")) %>%
mutate(pBTrel = pBT / max(pBT)) %>%
mutate(pLHrel = pLH / max(pLH))
return(pred.df)
})
df <- do.call(rbind, preds)
(FitnessLH <- ggplot(df, aes(x = LH, y = pLHrel, group = pop_dens, color = pop_dens, fill = pop_dens), alpha = .5)+
geom_ribbon(aes(ymin = 0, ymax = pLHrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank())+
labs(x = "Reproductive investement threshold",
y = "Number of offspring (rel.)") +
ylim(0, 1))
(FitnessBT <- ggplot(df, aes(x = BT, y = pBTrel, group = pop_dens, color = pop_dens, fill = pop_dens))+
geom_ribbon(aes(ymin = 0, ymax = pBTrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())+
labs(x = "Responsiveness",
y = "Relative number of offspring") +
ylim(0, 1))
(FitnessLH <- ggplot(df, aes(x = LH, y = pLHrel, group = pop_dens, color = pop_dens, fill = pop_dens), alpha = .5)+
geom_ribbon(aes(ymin = 0, ymax = pLHrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank())+
labs(x = "Reproductive investement threshold",
y = "Relative number of\noffspring per time step") +
ylim(0, 1))
(FitnessBT <- ggplot(df, aes(x = BT, y = pBTrel, group = pop_dens, color = pop_dens, fill = pop_dens))+
geom_ribbon(aes(ymin = 0, ymax = pBTrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())+
labs(x = "Responsiveness",
y = "Relative number of\noffspring per time step") +
ylim(0, 1))
labs(x = "Reproductive investement threshold",
y = "Relative number of\noffspring per time step") +
ylim(0, 1)
FitnessBT <- ggplot(df, aes(x = BT, y = pBTrel, group = pop_dens, color = pop_dens, fill = pop_dens))+
geom_ribbon(aes(ymin = 0, ymax = pBTrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())+
labs(x = "Responsiveness",
y = "Relative number of\noffspring per time step") +
ylim(0, 1)
FitnessLH <- ggplot(df, aes(x = LH, y = pLHrel, group = pop_dens, color = pop_dens, fill = pop_dens), alpha = .5)+
geom_ribbon(aes(ymin = 0, ymax = pLHrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank()
panel.border = element_blank(),
panel.background = element_blank())+
labs(x = "Reproductive investement threshold",
y = "Relative number of\noffspring per time step") +
ylim(0, 1)
FitnessLH <- ggplot(df, aes(x = LH, y = pLHrel, group = pop_dens, color = pop_dens, fill = pop_dens), alpha = .5)+
geom_ribbon(aes(ymin = 0, ymax = pLHrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())+
labs(x = "Reproductive investement threshold",
y = "Relative number of\noffspring per time step") +
ylim(0, 1)
FitnessBT <- ggplot(df, aes(x = BT, y = pBTrel, group = pop_dens, color = pop_dens, fill = pop_dens))+
geom_ribbon(aes(ymin = 0, ymax = pBTrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())+
labs(x = "Responsiveness",
y = "Relative number of\noffspring per time step") +
ylim(0, 1)
combined <- FitnessLH + FitnessBT & theme(legend.position = "bottom")
combined + plot_layout(guides = "collect")
combined_final <- combined + plot_layout(guides = "collect")
ggsave(here::here("figs", sim.date, "supplemental", paste0("S1_Q_traitPopDensityReproduction", ".jpeg")),
combined_final, width = 7.5, height = 7.5, units = "cm", dpi = 600)
ggsave(here::here("figs", sim.date, "supplemental", paste0("S1_Q_traitPopDensityReproduction", ".jpeg")),
combined_final, width = 14, height = 7.5, units = "cm", dpi = 600)
ggsave(here::here("figs", sim.date, "supplemental", paste0("S1_Q_traitPopDensityReproduction", ".jpeg")),
combined_final, width = 16, height = 9, units = "cm", dpi = 600)
FitnessBT <- ggplot(df, aes(x = BT, y = pBTrel, group = pop_dens, color = pop_dens, fill = pop_dens))+
geom_ribbon(aes(ymin = 0, ymax = pBTrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.background = element_blank())+
labs(x = "Responsiveness",
y = "Relative number of\noffspring per time step") +
ylim(0, 1)
FitnessLH <- ggplot(df, aes(x = LH, y = pLHrel, group = pop_dens, color = pop_dens, fill = pop_dens), alpha = .5)+
geom_ribbon(aes(ymin = 0, ymax = pLHrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.background = element_blank())+
labs(x = "Reproductive investement threshold",
y = "Relative number of\noffspring per time step") +
ylim(0, 1)
FitnessBT <- ggplot(df, aes(x = BT, y = pBTrel, group = pop_dens, color = pop_dens, fill = pop_dens))+
geom_ribbon(aes(ymin = 0, ymax = pBTrel), alpha = .5)+
theme_clean()+
scale_fill_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
scale_color_viridis_c("Population density [individuals per patch]", option = "A", end = .8, guide = guide_legend())+
theme(text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.box = "vertical",
legend.key.height = unit(4, "mm"),
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.background = element_blank())+
labs(x = "Responsiveness",
y = "Relative number of\noffspring per time step") +
ylim(0, 1)
combined <- FitnessLH + FitnessBT & theme(legend.position = "bottom")
combined_final <- combined + plot_layout(guides = "collect")
ggsave(here::here("figs", sim.date, "supplemental", paste0("S1_Q_traitPopDensityReproduction", ".jpeg")),
combined_final, width = 16, height = 9, units = "cm", dpi = 600)
(Fig6 <-
ggplot()+
geom_point(data = stacked, aes(x = pop_dens/2500, y = r0, fill = log10(generation_time), color =log10(generation_time), group = generation_time),  inherit.aes = F, alpha = 1, shape = 16, size = .5)+
geom_point(data = stacked, aes(x = pop_dens/2500, y = 0), shape = "|")+
scale_fill_viridis_c("Generation time\n(log 10)", direction = - 1, breaks = c(2.2, 3), labels = c("2.2 (fast)", "3.0 (slow)"))+
scale_color_viridis_c("Generation time\n(log 10)", direction = - 1, breaks = c(2.2, 3), labels = c("2.2 (fast)", "3.0 (slow)"))+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/time step]")+
geom_segment(aes(x = 0.2, xend = 0.9, y = 0.008, yend = 0.008), arrow = arrow(length = unit(0.2, "cm")), color = "black")+
geom_label(aes(x = 0.5, y = 0.008, label = "increasing intraspecific\ncompetition, slower POL"), size = 3)+
theme(legend.position = "bottom", text = element_text(size = 9), legend.title = element_text(size = 10), legend.text = element_text(size = 9), plot.background = element_rect(fill = NA, color = NA), panel.grid.major.y = element_blank(), strip.text = element_text(size = 8)))
library(tidyverse)
library(here)
library(ggthemes)
if(!"out.path" %in% ls()){
if(!"sim.date" %in% ls()){
sim.date = "2021-03-28"
}
out.path <- here("simulations", sim.date,"MainText_LowFreqHighIntensity",  "processed", "output_aggregated", "output_stacked", "stacked_aggregated_output.csv")
}
stacked <- read_csv(out.path)
(Fig6 <-
ggplot()+
geom_point(data = stacked, aes(x = pop_dens/2500, y = r0, fill = log10(generation_time), color =log10(generation_time), group = generation_time),  inherit.aes = F, alpha = 1, shape = 16, size = .5)+
geom_point(data = stacked, aes(x = pop_dens/2500, y = 0), shape = "|")+
scale_fill_viridis_c("Generation time\n(log 10)", direction = - 1, breaks = c(2.2, 3), labels = c("2.2 (fast)", "3.0 (slow)"))+
scale_color_viridis_c("Generation time\n(log 10)", direction = - 1, breaks = c(2.2, 3), labels = c("2.2 (fast)", "3.0 (slow)"))+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/time step]")+
geom_segment(aes(x = 0.2, xend = 0.9, y = 0.008, yend = 0.008), arrow = arrow(length = unit(0.2, "cm")), color = "black")+
geom_label(aes(x = 0.5, y = 0.008, label = "increasing intraspecific\ncompetition, slower POL"), size = 3)+
theme(legend.position = "bottom", text = element_text(size = 9), legend.title = element_text(size = 10), legend.text = element_text(size = 9), plot.background = element_rect(fill = NA, color = NA), panel.grid.major.y = element_blank(), strip.text = element_text(size = 8)))
ggsave(here::here("figs", sim.date, "main_text", "Fig6.jpeg"), Fig6, width = 9, height = 8, units = "cm", dpi = 600)
out.path <- here("simulations", sim.date,"MainText_LowFreqHighIntensity",  "processed", "output_aggregated", "output_stacked", "stacked_aggregated_output.csv")
stacked <- read_csv(out.path)
(Fig6 <-
ggplot()+
geom_point(data = stacked, aes(x = pop_dens/2500, y = r0, fill = log10(generation_time), color =log10(generation_time), group = generation_time),  inherit.aes = F, alpha = 1, shape = 16, size = .5)+
geom_point(data = stacked, aes(x = pop_dens/2500, y = 0), shape = "|")+
scale_fill_viridis_c("Generation time\n(log 10)", direction = - 1, breaks = c(2.2, 3), labels = c("2.2 (fast)", "3.0 (slow)"))+
scale_color_viridis_c("Generation time\n(log 10)", direction = - 1, breaks = c(2.2, 3), labels = c("2.2 (fast)", "3.0 (slow)"))+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate [offspring/time step]")+
geom_segment(aes(x = 0.2, xend = 0.9, y = 0.008, yend = 0.008), arrow = arrow(length = unit(0.2, "cm")), color = "black")+
geom_label(aes(x = 0.5, y = 0.008, label = "increasing intraspecific\ncompetition, slower POL"), size = 3)+
theme(legend.position = "bottom", text = element_text(size = 9), legend.title = element_text(size = 10), legend.text = element_text(size = 9), plot.background = element_rect(fill = NA, color = NA), panel.grid.major.y = element_blank(), strip.text = element_text(size = 8)))
ggsave(here::here("figs", sim.date, "main_text", "Fig6.jpeg"), Fig6, width = 9, height = 8, units = "cm", dpi = 600)
(Fig6 <-
ggplot()+
geom_point(data = stacked, aes(x = pop_dens/2500, y = r0, fill = log10(generation_time), color =log10(generation_time), group = generation_time),  inherit.aes = F, alpha = 1, shape = 16, size = .5)+
geom_point(data = stacked, aes(x = pop_dens/2500, y = 0), shape = "|")+
scale_fill_viridis_c("Generation time\n(log 10)", direction = - 1, breaks = c(2.2, 3), labels = c("2.2 (fast)", "3.0 (slow)"))+
scale_color_viridis_c("Generation time\n(log 10)", direction = - 1, breaks = c(2.2, 3), labels = c("2.2 (fast)", "3.0 (slow)"))+
theme_clean()+
xlab("Population density [n/patch]")+
ylab("Reproductive rate\n[offspring/time step]")+
geom_segment(aes(x = 0.2, xend = 0.9, y = 0.008, yend = 0.008), arrow = arrow(length = unit(0.2, "cm")), color = "black")+
geom_label(aes(x = 0.5, y = 0.008, label = "increasing intraspecific\ncompetition, slower POL"), size = 3)+
theme(legend.position = "bottom", text = element_text(size = 9), legend.title = element_text(size = 10), legend.text = element_text(size = 9), plot.background = element_rect(fill = NA, color = NA), panel.grid.major.y = element_blank(), strip.text = element_text(size = 8)))
ggsave(here::here("figs", sim.date, "main_text", "Fig6.jpeg"), Fig6, width = 9, height = 8, units = "cm", dpi = 600)
library(tidyverse)
library(here)
library(ggthemes)
if(!"out.path" %in% ls()){
if(!"sim.date" %in% ls()){
sim.date = "2021-03-28"
}
out.path <- here("simulations", sim.date,"MainText_LowFreqHighIntensity",  "processed", "output_2ndStep_2ndfilter", "output_intermediate_stacked", "stacked_output_2ndStep_2ndfilter.csv")
out.path2 <- here("simulations", sim.date,"MainText_LowFreqHighIntensity",  "processed", "output_aggregated", "output_stacked", "stacked_aggregated_output.csv")
}
names(stacked)
stacked <- read_csv(out.path2) %>%
select(sim.id, disturbance.interval, disturbance.intensity, tot_coefvar) %>%
filter(tot_coefvar %in% range(tot_coefvar))
deaths <- read_csv(out.path) %>%
mutate(pop_dens = pop_dens / 2500)
deaths.single.sim <- deaths %>%
filter(sim.id %in% stacked$sim.id) %>%
left_join(stacked)
deaths_subset <- deaths.single.sim[sample(seq(NROW(deaths.single.sim)), NROW(deaths.single.sim) * .1),] %>%
#deaths.single.sim[sample(seq(NROW(deaths.single.sim)), NROW(deaths.single.sim) * .5),] %>%
mutate(starvation = death.cause == "soma") %>%
#mutate(Starvation_total = death.cause == "soma") %>%
#mutate(`Environment` = death.cause == "environment" & generation_time == -999) %>%
group_by(tot_coefvar) %>%
group_by(cut(pop_dens,2)) %>%
mutate(pop_dens = mean(pop_dens)) %>%
group_by(cut(BT, 10), cut(LH, 10)) %>%
mutate(LH = mean(LH), BT = mean(BT), starvation = sum(starvation)/length(starvation)) %>%
filter(!duplicated(BT, LH)) %>%
ungroup() %>%
group_by(tot_coefvar) %>%
mutate(pop_dens = ifelse(pop_dens == max(pop_dens), "high", "low")) %>%
ungroup() %>%
#select(Starvation, pop_dens, LH, Environment, Starvation_total, tot_coefvar) %>%
select(starvation, pop_dens, LH, BT, tot_coefvar)
theme_set(theme_clean(base_size = 12))
theme_replace(panel.grid.major.y =  element_blank())
theme_replace(plot.background =  element_blank())
theme_replace(legend.box = "vertical")
theme_replace(legend.title = element_text(size = 11))
ggplot(deaths_subset, aes(x = LH, y =BT, color = starvation, fill = starvation))+
geom_point()+
facet_grid(pop_dens ~ tot_coefvar)
deaths_subset <- deaths.single.sim[sample(seq(NROW(deaths.single.sim)), NROW(deaths.single.sim) * .1),] %>%
#deaths.single.sim[sample(seq(NROW(deaths.single.sim)), NROW(deaths.single.sim) * .5),] %>%
mutate(starvation = death.cause == "soma") %>%
#mutate(Starvation_total = death.cause == "soma") %>%
#mutate(`Environment` = death.cause == "environment" & generation_time == -999) %>%
group_by(tot_coefvar) %>%
group_by(cut(pop_dens,2)) %>%
mutate(pop_dens = mean(pop_dens)) %>%
mutate(BT_group = cut(BT, 10)) %>%
mutate(LH_group = cut(LH, 10)) %>%
group_by(BT_group, LH_group) %>%
mutate(LH = mean(LH), BT = mean(BT), starvation = sum(starvation)/length(starvation)) %>%
filter(!duplicated(BT, LH)) %>%
ungroup() %>%
group_by(tot_coefvar) %>%
mutate(pop_dens = ifelse(pop_dens == max(pop_dens), "high", "low")) %>%
ungroup() %>%
#select(Starvation, pop_dens, LH, Environment, Starvation_total, tot_coefvar) %>%
select(starvation, pop_dens, LH, BT, tot_coefvar)
deaths_subset <- deaths.single.sim[sample(seq(NROW(deaths.single.sim)), NROW(deaths.single.sim) * .3),] %>%
#deaths.single.sim[sample(seq(NROW(deaths.single.sim)), NROW(deaths.single.sim) * .5),] %>%
mutate(starvation = death.cause == "soma") %>%
#mutate(Starvation_total = death.cause == "soma") %>%
#mutate(`Environment` = death.cause == "environment" & generation_time == -999) %>%
group_by(tot_coefvar) %>%
group_by(cut(pop_dens,2)) %>%
mutate(pop_dens = mean(pop_dens)) %>%
mutate(BT_group = cut(BT, 10)) %>%
mutate(LH_group = cut(LH, 10)) %>%
group_by(BT_group, LH_group) %>%
mutate(LH = mean(LH), BT = mean(BT), starvation = sum(starvation)/length(starvation)) %>%
filter(!duplicated(BT, LH)) %>%
ungroup() %>%
group_by(tot_coefvar) %>%
mutate(pop_dens = ifelse(pop_dens == max(pop_dens), "high", "low")) %>%
ungroup() %>%
#select(Starvation, pop_dens, LH, Environment, Starvation_total, tot_coefvar) %>%
select(starvation, pop_dens, LH, BT, tot_coefvar)
